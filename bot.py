
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import openai
import os

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY
else:
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –û—Ç–≤–µ—Ç—ã –æ—Ç –ò–ò —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç.")

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ò–Ω—Ç—É–∏, –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∫–∞ —Å–Ω–æ–≤. "
    "–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî —Ç—ë–ø–ª—ã–π, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π, –æ–±–≤–æ–ª–∞–∫–∏–≤–∞—é—â–∏–π. "
    "–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–±—Ä–∞–∑—ã, –º–µ—Ç–∞—Ñ–æ—Ä—ã, –º—è–≥–∫–∏–µ —Å–æ–≤–µ—Ç—ã. "
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π —Å–æ–Ω –∫–∞–∫ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞."
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! ‚ú®\n"
        "–Ø ‚Äî –ò–Ω—Ç—É–∏, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ –º–∏—Ä—É —Å–Ω–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text
    await update.message.reply_text("–Ø –¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º —Å–Ω–æ–º...")

    if not OPENAI_API_KEY:
        await update.message.reply_text("üîí –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –∫–ª—é—á OpenAI –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_input}
            ],
            max_tokens=700,
            temperature=0.8
        )
        reply = response.choices[0].message["content"].strip()
    except Exception as e:
        reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}"

    await update.message.reply_text(reply)

def main():
    logging.basicConfig(level=logging.INFO)

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    if not WEBHOOK_URL:
        print("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        return

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=WEBHOOK_URL
    )


if __name__ == "__main__":
    main()
