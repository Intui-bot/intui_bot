import os
import logging
import smtplib
from email.mime.text import MIMEText
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from openai import OpenAI

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª error.log
logging.basicConfig(
    filename="error.log",
    filemode="a",
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.ERROR
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω SMTP)
def send_error_email(subject: str, body: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º (body).
    –¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
      EMAIL_SMTP_SERVER, EMAIL_SMTP_PORT,
      EMAIL_USER, EMAIL_PASSWORD, EMAIL_TO
    """
    try:
        smtp_server = os.getenv("EMAIL_SMTP_SERVER")
        smtp_port = int(os.getenv("EMAIL_SMTP_PORT", "587"))
        email_user = os.getenv("EMAIL_USER")
        email_pass = os.getenv("EMAIL_PASSWORD")
        email_to = os.getenv("EMAIL_TO")

        if not all([smtp_server, smtp_port, email_user, email_pass, email_to]):
            # –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã ‚Äì –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
            return

        msg = MIMEText(body, _charset="utf-8")
        msg["Subject"] = subject
        msg["From"] = email_user
        msg["To"] = email_to

        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(email_user, email_pass)
            server.sendmail(email_user, [email_to], msg.as_string())
    except Exception as e:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–µ—É–¥–∞—á–Ω–∞ ‚Äì —Ç–æ–∂–µ –ª–æ–≥–∏—Ä—É–µ–º
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                      –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL      = os.getenv("WEBHOOK_URL")

# –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
STYLE_PROMPTS = {
    "–°–æ—Ñ–∏—è": (
        "–¢—ã ‚Äî –ò–Ω—Ç—É–∏, –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∫–∞ —Å–Ω–æ–≤. "
        "–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –∏ –º—è–≥–∫–∞—è, —Å–ª–æ–≤–Ω–æ —à–µ–ª–µ—Å—Ç –ª–∏—Å—Ç–≤—ã. "
        "–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø–æ—ç—Ç–∏—á–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –º–µ—Ç–∞—Ñ–æ—Ä—ã, –º—è–≥–∫–∏–µ —Å–æ–≤–µ—Ç—ã. "
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π —Å–æ–Ω –∫–∞–∫ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞ —á–µ–ª–æ–≤–µ–∫–∞."
    ),
    "–ú–∏—Å—Ç–∏–∫": (
        "–¢—ã ‚Äî –ò–Ω—Ç—É–∏, –∑–∞–≥–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∏—Ü–∞. "
        "–ì–æ–≤–æ—Ä–∏—à—å –æ–±—Ä–∞–∑–∞–º–∏, —Ç–∞–π–Ω–∞–º–∏ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏, —Å–ª–æ–≤–Ω–æ –¥—Ä–µ–≤–Ω—è—è –∂—Ä–∏—Ü–∞. "
        "–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ ‚Äì –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –∫–∞–∂–¥–∞—è —Ñ—Ä–∞–∑–∞ ‚Äì –∫–ª—é—á –∫ —Ç–∞–π–Ω—ã–º –ø–æ—Å–ª–∞–Ω–∏—è–º. "
        "–†–∞—Å–∫—Ä—ã–≤–∞–π —Å–∫—Ä—ã—Ç—ã–µ —Å–º—ã—Å–ª—ã —Å–Ω–∞, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è."
    ),
    "–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫": (
        "–¢—ã ‚Äî –ò–Ω—Ç—É–∏, —Å—Ç—Ä–æ–≥–∏–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —Å–Ω–æ–≤, —É—á–µ–Ω–∏–∫ –§—Ä–µ–π–¥–∞ –∏ –Æ–Ω–≥–∞. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–µ—Ç–∏–ø—ã, –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è, "
        "–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ —Å–∏–º–≤–æ–ª—ã. " 
        "–î–µ–ª–∞–π —É–ø–æ—Ä –Ω–∞ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç—Ä–∞–∫—Ç–æ–≤–∫—É –∏ –≥–ª—É–±–æ–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã."
    )
}

DEFAULT_STYLE = "–°–æ—Ñ–∏—è"  # –°—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MAX_HISTORY_ENTRIES = 3  # –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                           –ö–æ–º–∞–Ω–¥–∞ /start
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
     - üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–æ–Ω
     - üé≠ –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å
     - üìú –ò—Å—Ç–æ—Ä–∏—è —Å–Ω–æ–≤
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç user_data.
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—é –≤ user_data
    context.user_data["style"] = DEFAULT_STYLE
    context.user_data["history"] = []

    keyboard = [
        [InlineKeyboardButton("üåô –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–æ–Ω", callback_data="write_dream")],
        [InlineKeyboardButton("üé≠ –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å", callback_data="choose_style")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–Ω–æ–≤", callback_data="show_history")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! ‚ú®\n"
        "–Ø ‚Äî –ò–Ω—Ç—É–∏, —Ç–≤–æ—è –ø—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –ø–æ –º–∏—Ä—É —Å–Ω–æ–≤. "
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_markup
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                         –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ CallbackQuery
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è Inline-–∫–Ω–æ–ø–æ–∫:
     - write_dream      ‚Üí –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω
     - choose_style     ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
     - show_history     ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–Ω–∞
     - style_<–∏–º—è>      ‚Üí —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
    """
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "write_dream":
        await query.edit_message_text("üìù –ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏–ª–æ—Å—å...")
        return

    if data == "choose_style":
        keyboard = [
            [InlineKeyboardButton(style_name, callback_data=f"style_{style_name}")]
            for style_name in STYLE_PROMPTS.keys()
        ]
        await query.edit_message_text(
            "üé≠ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    if data == "show_history":
        history = context.user_data.get("history", [])
        if not history:
            await query.edit_message_text("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        else:
            text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω—ã:\n\n"
            for i, (dream_text, _, style_name) in enumerate(reversed(history), 1):
                snippet = dream_text if len(dream_text) <= 40 else dream_text[:40] + "..."
                text += f"{i}. üí§ *{snippet}* ‚Äî _{style_name}_\n"
            await query.edit_message_text(text, parse_mode="Markdown")
        return

    if data.startswith("style_"):
        selected_style = data.replace("style_", "")
        context.user_data["style"] = selected_style
        await query.edit_message_text(
            f"‚úÖ –°—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{selected_style}*",
            parse_mode="Markdown"
        )
        return


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                       –ö–æ–º–∞–Ω–¥–∞ /style (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def style_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏ –≤—ã–∑–æ–≤–µ /style –≤—ã–≤–æ–¥–∏—Ç —Ç–æ –∂–µ –º–µ–Ω—é —Å—Ç–∏–ª–µ–π, —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞.
    """
    keyboard = [
        [InlineKeyboardButton(style_name, callback_data=f"style_{style_name}")]
        for style_name in STYLE_PROMPTS.keys()
    ]
    await update.message.reply_text(
        "üé≠ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                    –ö–æ–º–∞–Ω–¥–∞ /history (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def history_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏ –≤—ã–∑–æ–≤–µ /history –≤—ã–≤–æ–¥–∏—Ç –¥–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–Ω–æ–≤.
    """
    history = context.user_data.get("history", [])
    if not history:
        await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
    else:
        text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω—ã:\n\n"
        for i, (dream_text, _, style_name) in enumerate(reversed(history), 1):
            snippet = dream_text if len(dream_text) <= 40 else dream_text[:40] + "..."
            text += f"{i}. üí§ *{snippet}* ‚Äî _{style_name}_\n"
        await update.message.reply_text(text, parse_mode="Markdown")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                      –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–Ω—ã)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç (—Å–æ–Ω), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —É OpenAI,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é (–ª–∏–º–∏—Ç 3), –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏.
    """
    user_input = update.message.text
    await update.message.reply_text("üîÆ –Ø –¥—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º —Å–Ω–æ–º...")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî DEFAULT_STYLE)
    style_name = context.user_data.get("style", DEFAULT_STYLE)
    prompt = STYLE_PROMPTS.get(style_name, STYLE_PROMPTS[DEFAULT_STYLE])

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)

        # –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": user_input}
            ],
            temperature=0.8,
            max_tokens=700
        )
        reply_text = response.choices[0].message.content.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ 3 –∑–∞–ø–∏—Å–∏)
        history = context.user_data.setdefault("history", [])
        history.append((user_input, reply_text, style_name))
        if len(history) > MAX_HISTORY_ENTRIES:
            history.pop(0)

    except Exception as e:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}"
        logging.error(error_message)

        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω SMTP)
        send_error_email(
            subject="Intui Bot Error",
            body=error_message
        )

        reply_text = f"‚ö†Ô∏è {error_message}"

    await update.message.reply_text(reply_text)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#                                  –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

if __name__ == "__main__":
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("style", style_cmd))
    application.add_handler(CommandHandler("history", history_cmd))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ Webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=WEBHOOK_URL
    )
